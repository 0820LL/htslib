#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#
#  export GNUPLOT_DEFAULT_GDFONT="DejaVuSansMono"
#  export GDFONTPATH=/usr/share/fonts/truetype/ttf-dejavu/

use strict;
use warnings;
use Carp;

my $opts = parse_params();
parse_vcfcheck($opts);
for my $id (file_ids($opts))
{
	plot_tstv_by_AF($opts,$id);
}
create_pdf($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "Usage: plot-vcfcheck [OPTIONS] file.vc\n",
        "       plot-vcfcheck -p outdir/ file.vc\n",
        "Options:\n",
        "   -k, --keep-files                    Do not remove temporary files.\n",
        "   -p, --prefix <path>                 The output files prefix, add a slash to create new directory.\n",
        "   -h, -?, --help                      This help message.\n",
        "\n";
}


sub parse_params
{
    $0 =~ s{^.+/}{};
    my $opts = { args => join(' ',$0,@ARGV), };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-k' || $arg eq '--keep-files' ) { $$opts{keep_files}=1; next; }
        if ( $arg eq '-p' || $arg eq '--prefix' ) { $$opts{prefix}=shift(@ARGV); next; }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( -e $arg ) { $$opts{vcfcheck}=$arg; next; }
        error("Unknown parameter or non-existent file \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{vcfcheck}) ) { error("No vcfcheck file?\n") }
    if ( !exists($$opts{prefix}) ) { error("Expected -p parameter.\n") }
    if ( $$opts{prefix}=~m{/$} ) { `mkdir -p $$opts{prefix}`; }
    elsif ( !($$opts{prefix}=~/-$/) ) { $$opts{prefix} .= '-'; }
    return $opts;
}


sub plot
{
    my ($cmdfile) = @_;
    my $cmd = "gnuplot $cmdfile";
    system($cmd);
    if ( $? ) { error("The command exited with non-zero status $?:\n\t$cmd\n\n"); }
}


sub parse_vcfcheck
{
    my ($opts) = @_;
    open(my $fh,'<',$$opts{vcfcheck}) or error("$$opts{vcfcheck}: $!");
    my $line = <$fh>;
    if ( !($line=~/^# This file was produced by vcfcheck/) ) { error("Sanity check failed: was this file generated by vcfcheck?"); }
    while ($line=<$fh>)
    {
        if ( $line=~/^#/ ) { next; }
        my @items = split(/\t/,$line);
        chomp($items[-1]);
        if ( $items[0] eq 'SN' )
        {
            $$opts{dat}{$items[1]}{$items[2]} = splice(@items,3);
            next;
        }
        push @{$$opts{dat}{$items[0]}{$items[1]}}, [splice(@items,2)];
    }
    close($fh);

    # Check sanity
    if ( !exists($$opts{dat}{ID}{0}) )
    {
        error("Sanity check failed: no stats found by vcfcheck??\n");
    }
}

sub file_ids
{
	my ($opts) = @_;
	my $id = 0;
	my @out;
	while ( exists($$opts{dat}{ID}) && exists($$opts{dat}{ID}{$id}) ) { push @out, $id++; }
	return @out;
}

sub get_defaults
{
    my ($opts,$img_fname,%args) = @_;

    if ( !($img_fname=~/\.png$/i) ) { error("FIXME: currently only PNG supported. (Easy to extend.)\n"); }

    # Determine the gnuplot script file name
    my $gp_file = $img_fname;
    $gp_file =~ s{\.[^.]+$}{.gp};
    if ( !($gp_file=~/.gp$/) ) { $gp_file .= '.gp'; }

    # Determine the default title:
    #       5446_6/5446_6.bam.bc.gp -> 5446_6
    #       test.aaa.png -> test.aaa
    if ( !($$opts{vcfcheck}=~m{([^/]+?)(?:\.vc)?$}i) ) { error("FIXME: Could not determine the title from [$img_fname]\n"); }
    my $title = $1;

    my $dir = $gp_file;
    $dir =~ s{/[^/]+$}{};
    if ( $dir && $dir ne $gp_file ) { `mkdir -p $dir`; }

    my $wh = exists($args{wh}) ? $args{wh} : '600,400';

    open(my $fh,'>',$gp_file) or error("$gp_file: $!");
    return { 
        title => $title, 
        gp    => $gp_file, 
        img   => $img_fname, 
        fh    => $fh, 
        terminal => qq[set terminal png size $wh truecolor font "Vera,9"],
        grid  => 'set grid xtics ytics back lc rgb "#cccccc"',
		with  => 'w lp pt 8 ps 0.4',
    };
}

sub percentile
{
    my ($p,@vals) = @_;
    my $N = 0;
    for my $val (@vals) { $N += $val; }
    my $n = $p*($N+1)/100.;
    my $k = int($n);
    my $d = $n-$k;
    if ( $k<=0 ) { return 0; }
    if ( $k>=$N ) { return scalar @vals-1; }
    my $cnt;
    for (my $i=0; $i<@vals; $i++)
    { 
        $cnt += $vals[$i]; 
        if ( $cnt>=$k ) { return $i; }
    }
    error("FIXME: this should not happen [percentile]\n");
}

sub get_values
{
	my ($opts,$id,$key) = @_;
	if ( !exists($$opts{dat}{$key}) ) { return (); }
	if ( !exists($$opts{dat}{$key}{$id}) ) { return (); }
	return (@{$$opts{dat}{$key}{$id}});
}

sub plot_tstv_by_AF
{
    my ($opts,$id) = @_;
	my @vals = get_values($opts,$id,'TsTvAF');
    if ( !@vals ) { return; }
    my $args = get_defaults($opts,"$$opts{prefix}$id.tstv_by_af.png");
    my $fh = $$args{fh};
    print $fh qq[
            $$args{terminal}
            set output "$$args{img}"
            $$args{grid}
            set ylabel "Ts/Tv" 
            set y2label "Number of variants" 
			set y2tics nomirror
			set yrange [0.5:3.0]
			set ytics nomirror
            set xlabel "Non-reference Allele Frequency"
            set title "$$args{title}"
            plot '-' $$args{with} t 'Ts/Tv', '-' axes x1y2 $$args{with} t 'Count'
        ];
	for my $val (@vals) { print $fh "$$val[0]\t$$val[2]\n"; } print $fh "end\n";
	for my $val (@vals) { print $fh "$$val[0]\t$$val[1]\n"; } print $fh "end\n";
    close($fh);
    plot($$args{gp});
}

sub create_pdf
{
	my ($opts) = @_;
}

